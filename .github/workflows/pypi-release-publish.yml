# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: PyPi Release Publish

run-name: PyPi Release Publish

on: 
  release:
    types: [created]

permissions:
  contents: read

jobs:
  pypi-release:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  check-froster-installation:
    needs: pypi-release
    runs-on: ubuntu-latest
    steps:   

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install pipx
        run: python -m pip install pipx

      - name: Give PyPi repo some minuts to update
        run: sleep 300 # Wait for 5 minutes

      - name: Install Froster
        run: curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/install.sh?$(date +%s) | bash

      - name: Check Froster version matches tag
        run: |
          VERSION=$(froster --version)
          TAG=${GITHUB_REF#refs/tags/}
          if [[ "$VERSION" != "froster $TAG" ]]; then
            echo "Version $VERSION does not match tag $TAG"
            exit 1
          else
            echo "froster $VERSION successfully installed"
          fi
